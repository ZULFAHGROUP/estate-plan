{"version":3,"file":"static/js/335.fd74e5f1.chunk.js","mappings":"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","sources":["../node_modules/classnames/index.js","../node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js","../node_modules/@bedrock-layout/use-stateful-ref/lib/index.m.js","../node_modules/react-responsive-modal/src/CloseIcon.tsx","../node_modules/react-responsive-modal/src/utils.ts","../node_modules/react-responsive-modal/src/lib/focusTrapJs.ts","../node_modules/react-responsive-modal/src/FocusTrap.tsx","../node_modules/react-responsive-modal/src/modalManager.ts","../node_modules/react-responsive-modal/src/useScrollLock.ts","../node_modules/react-responsive-modal/src/index.tsx","../node_modules/@bedrock-layout/use-forwarded-ref/lib/index.m.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// Older browsers don't support event options, feature detect it.\n\n// Adopted and modified solution from Bohdan Didukh (2017)\n// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi\n\nvar hasPassiveEvents = false;\nif (typeof window !== 'undefined') {\n  var passiveTestOptions = {\n    get passive() {\n      hasPassiveEvents = true;\n      return undefined;\n    }\n  };\n  window.addEventListener('testPassive', null, passiveTestOptions);\n  window.removeEventListener('testPassive', null, passiveTestOptions);\n}\n\nvar isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\n\n\nvar locks = [];\nvar documentListenerAdded = false;\nvar initialClientY = -1;\nvar previousBodyOverflowSetting = void 0;\nvar previousBodyPaddingRight = void 0;\n\n// returns true if `el` should be allowed to receive touchmove events.\nvar allowTouchMove = function allowTouchMove(el) {\n  return locks.some(function (lock) {\n    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar preventDefault = function preventDefault(rawEvent) {\n  var e = rawEvent || window.event;\n\n  // For the case whereby consumers adds a touchmove event listener to document.\n  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })\n  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then\n  // the touchmove event on document will break.\n  if (allowTouchMove(e.target)) {\n    return true;\n  }\n\n  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).\n  if (e.touches.length > 1) return true;\n\n  if (e.preventDefault) e.preventDefault();\n\n  return false;\n};\n\nvar setOverflowHidden = function setOverflowHidden(options) {\n  // If previousBodyPaddingRight is already set, don't set it again.\n  if (previousBodyPaddingRight === undefined) {\n    var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;\n    var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;\n\n    if (_reserveScrollBarGap && scrollBarGap > 0) {\n      previousBodyPaddingRight = document.body.style.paddingRight;\n      document.body.style.paddingRight = scrollBarGap + 'px';\n    }\n  }\n\n  // If previousBodyOverflowSetting is already set, don't set it again.\n  if (previousBodyOverflowSetting === undefined) {\n    previousBodyOverflowSetting = document.body.style.overflow;\n    document.body.style.overflow = 'hidden';\n  }\n};\n\nvar restoreOverflowSetting = function restoreOverflowSetting() {\n  if (previousBodyPaddingRight !== undefined) {\n    document.body.style.paddingRight = previousBodyPaddingRight;\n\n    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it\n    // can be set again.\n    previousBodyPaddingRight = undefined;\n  }\n\n  if (previousBodyOverflowSetting !== undefined) {\n    document.body.style.overflow = previousBodyOverflowSetting;\n\n    // Restore previousBodyOverflowSetting to undefined\n    // so setOverflowHidden knows it can be set again.\n    previousBodyOverflowSetting = undefined;\n  }\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions\nvar isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {\n  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;\n};\n\nvar handleScroll = function handleScroll(event, targetElement) {\n  var clientY = event.targetTouches[0].clientY - initialClientY;\n\n  if (allowTouchMove(event.target)) {\n    return false;\n  }\n\n  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {\n    // element is at the top of its scroll.\n    return preventDefault(event);\n  }\n\n  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {\n    // element is at the bottom of its scroll.\n    return preventDefault(event);\n  }\n\n  event.stopPropagation();\n  return true;\n};\n\nexport var disableBodyScroll = function disableBodyScroll(targetElement, options) {\n  // targetElement must be provided\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');\n    return;\n  }\n\n  // disableBodyScroll must not have been called on this targetElement before\n  if (locks.some(function (lock) {\n    return lock.targetElement === targetElement;\n  })) {\n    return;\n  }\n\n  var lock = {\n    targetElement: targetElement,\n    options: options || {}\n  };\n\n  locks = [].concat(_toConsumableArray(locks), [lock]);\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        initialClientY = event.targetTouches[0].clientY;\n      }\n    };\n    targetElement.ontouchmove = function (event) {\n      if (event.targetTouches.length === 1) {\n        // detect single touch.\n        handleScroll(event, targetElement);\n      }\n    };\n\n    if (!documentListenerAdded) {\n      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = true;\n    }\n  } else {\n    setOverflowHidden(options);\n  }\n};\n\nexport var clearAllBodyScrollLocks = function clearAllBodyScrollLocks() {\n  if (isIosDevice) {\n    // Clear all locks ontouchstart/ontouchmove handlers, and the references.\n    locks.forEach(function (lock) {\n      lock.targetElement.ontouchstart = null;\n      lock.targetElement.ontouchmove = null;\n    });\n\n    if (documentListenerAdded) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n\n    // Reset initial clientY.\n    initialClientY = -1;\n  } else {\n    restoreOverflowSetting();\n  }\n\n  locks = [];\n};\n\nexport var enableBodyScroll = function enableBodyScroll(targetElement) {\n  if (!targetElement) {\n    // eslint-disable-next-line no-console\n    console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');\n    return;\n  }\n\n  locks = locks.filter(function (lock) {\n    return lock.targetElement !== targetElement;\n  });\n\n  if (isIosDevice) {\n    targetElement.ontouchstart = null;\n    targetElement.ontouchmove = null;\n\n    if (documentListenerAdded && locks.length === 0) {\n      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);\n      documentListenerAdded = false;\n    }\n  } else if (!locks.length) {\n    restoreOverflowSetting();\n  }\n};\n\n","import u from \"react\";\nfunction s(c = null) {\n  let [e, f] = u.useState(c);\n  const { current: r } = u.useRef({\n    current: e\n  });\n  return Object.defineProperty(r, \"current\", {\n    get: () => e,\n    set: (t) => {\n      Object.is(e, t) || (e = t, f(t));\n    }\n  }), r;\n}\nexport {\n  s as default,\n  s as useStatefulRef\n};\n","import React from 'react';\nimport cx from 'classnames';\n\ninterface CloseIconProps {\n  id?: string;\n  closeIcon?: React.ReactNode;\n  styles?: {\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  classNames?: {\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  classes: {\n    closeButton?: string;\n  };\n  onClick: () => void;\n}\n\nconst CloseIcon = ({\n  classes,\n  classNames,\n  styles,\n  id,\n  closeIcon,\n  onClick,\n}: CloseIconProps) => (\n  <button\n    id={id}\n    className={cx(classes.closeButton, classNames?.closeButton)}\n    style={styles?.closeButton}\n    onClick={onClick}\n    data-testid=\"close-button\"\n  >\n    {closeIcon ? (\n      closeIcon\n    ) : (\n      <svg\n        className={classNames?.closeIcon}\n        style={styles?.closeIcon}\n        width={28}\n        height={28}\n        viewBox=\"0 0 36 36\"\n        data-testid=\"close-icon\"\n      >\n        <path d=\"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\" />\n      </svg>\n    )}\n  </button>\n);\n\nexport default CloseIcon;\n","export const isBrowser = typeof window !== 'undefined';\n","// https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nexport const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\n\nfunction isHidden(node: any) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return (\n    node.offsetParent === null || getComputedStyle(node).visibility === 'hidden'\n  );\n}\n\nfunction getCheckedRadio(nodes: any, form: any) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node: any) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll(\n    'input[type=\"radio\"][name=\"' + node.name + '\"]'\n  );\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || (checked === undefined && radioSet[0] === node);\n}\n\nexport function getAllTabbingElements(parentElem: any) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n    if (\n      currentActiveElement === node ||\n      (!node.disabled &&\n        getTabindex(node) > -1 &&\n        !isHidden(node) &&\n        isNotRadioOrTabbableRadio(node))\n    ) {\n      onlyTabbable.push(node);\n    }\n  }\n  return onlyTabbable;\n}\n\nexport function tabTrappingKey(event: any, parentElem: any) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getTabindex(node: any) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!isNaN(tabindexAttr)) return tabindexAttr;\n  // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node: any) {\n  return node.getAttribute('contentEditable');\n}\n","import { useEffect, useRef } from 'react';\nimport { isBrowser } from './utils';\nimport {\n  tabTrappingKey,\n  candidateSelectors,\n  getAllTabbingElements,\n} from './lib/focusTrapJs';\n\ninterface FocusTrapProps {\n  container?: React.RefObject<HTMLElement> | null;\n  initialFocusRef?: React.RefObject<HTMLElement>;\n}\n\nexport const FocusTrap = ({ container, initialFocusRef }: FocusTrapProps) => {\n  const refLastFocus = useRef<HTMLElement | null>();\n  /**\n   * Handle focus lock on the modal\n   */\n  useEffect(() => {\n    const handleKeyEvent = (event: KeyboardEvent) => {\n      if (container?.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    }\n    // On mount we focus on the first focusable element in the modal if there is one\n    if (isBrowser && container?.current) {\n      const savePreviousFocus = () => {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (\n          candidateSelectors.findIndex((selector) =>\n            document.activeElement?.matches(selector)\n          ) !== -1\n        ) {\n          refLastFocus.current = document.activeElement as HTMLElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus();\n        // We need to schedule focusing on a next frame - this allows to focus on the modal root\n        requestAnimationFrame(() => {\n          initialFocusRef.current?.focus();\n        });\n      } else {\n        const allTabbingElements = getAllTabbingElements(container.current);\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n    return () => {\n      if (isBrowser) {\n        document.removeEventListener('keydown', handleKeyEvent);\n        // On unmount we restore the focus to the last focused element\n        refLastFocus.current?.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n\n  return null;\n};\n","import { Ref, useEffect } from 'react';\n\nlet modals: Ref<Element>[] = [];\n\n/**\n * Handle the order of the modals.\n * Inspired by the material-ui implementation.\n */\nexport const modalManager = {\n  /**\n   * Register a new modal\n   */\n  add: (newModal: Ref<Element>) => {\n    modals.push(newModal);\n  },\n\n  /**\n   * Remove a modal\n   */\n  remove: (oldModal: Ref<Element>) => {\n    modals = modals.filter((modal) => modal !== oldModal);\n  },\n\n  /**\n   * When multiple modals are rendered will return true if current modal is the last one\n   */\n  isTopModal: (modal: Ref<Element>) =>\n    !!modals.length && modals[modals.length - 1] === modal,\n};\n\nexport function useModalManager(ref: Ref<Element>, open: boolean) {\n  useEffect(() => {\n    if (open) {\n      modalManager.add(ref);\n    }\n    return () => {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n","import { useEffect, useRef } from 'react';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\n\nexport const useScrollLock = (\n  refModal: React.RefObject<Element>,\n  open: boolean,\n  showPortal: boolean,\n  blockScroll: boolean,\n  reserveScrollBarGap?: boolean\n) => {\n  const oldRef = useRef<Element | null>(null);\n\n  useEffect(() => {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, { reserveScrollBarGap });\n    }\n    return () => {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport CloseIcon from './CloseIcon';\nimport { FocusTrap } from './FocusTrap';\nimport { modalManager, useModalManager } from './modalManager';\nimport { useScrollLock } from './useScrollLock';\nimport { isBrowser } from './utils';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nconst classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton',\n};\n\nexport interface ModalProps {\n  /**\n   * Control if the modal is open or not.\n   */\n  open: boolean;\n  /**\n   * Should the dialog be centered.\n   *\n   * Default to false.\n   */\n  center?: boolean;\n  /**\n   * Is the modal closable when user press esc key.\n   *\n   * Default to true.\n   */\n  closeOnEsc?: boolean;\n  /**\n   * Is the modal closable when user click on overlay.\n   *\n   * Default to true.\n   */\n  closeOnOverlayClick?: boolean;\n  /**\n   * Whether to block scrolling when dialog is open.\n   *\n   * Default to true.\n   */\n  blockScroll?: boolean;\n  /**\n   * Show the close icon.\n   *\n   * Default to true.\n   */\n  showCloseIcon?: boolean;\n  /**\n   * id attribute for the close icon button.\n   */\n  closeIconId?: string;\n  /**\n   * Custom icon to render (svg, img, etc...).\n   */\n  closeIcon?: React.ReactNode;\n  /**\n   * When the modal is open, trap focus within it.\n   *\n   * Default to true.\n   */\n  focusTrapped?: boolean;\n  /**\n   * Element to focus when focus trap is used.\n   *\n   * Default to undefined.\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>;\n  /**\n   * You can specify a container prop which should be of type `Element`.\n   * The portal will be rendered inside that element.\n   * The default behavior will create a div node and render it at the at the end of document.body.\n   */\n  container?: Element | null;\n  /**\n   * An object containing classNames to style the modal.\n   */\n  classNames?: {\n    root?: string;\n    overlay?: string;\n    overlayAnimationIn?: string;\n    overlayAnimationOut?: string;\n    modalContainer?: string;\n    modal?: string;\n    modalAnimationIn?: string;\n    modalAnimationOut?: string;\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  /**\n   * An object containing the styles objects to style the modal.\n   */\n  styles?: {\n    root?: React.CSSProperties;\n    overlay?: React.CSSProperties;\n    modalContainer?: React.CSSProperties;\n    modal?: React.CSSProperties;\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  /**\n   * Animation duration in milliseconds.\n   *\n   * Default to 300.\n   */\n  animationDuration?: number;\n  /**\n   * ARIA role for modal\n   *\n   * Default to 'dialog'.\n   */\n  role?: string;\n  /**\n   * ARIA label for modal\n   */\n  ariaLabelledby?: string;\n  /**\n   * ARIA description for modal\n   */\n  ariaDescribedby?: string;\n  /**\n   * Avoid unpleasant flickering effect when body overflow is hidden. For more information see https://www.npmjs.com/package/body-scroll-lock\n   */\n  reserveScrollBarGap?: boolean;\n  /**\n   * id attribute for modal container\n   */\n  containerId?: string;\n  /**\n   * id attribute for modal\n   */\n  modalId?: string;\n  /**\n   * Callback fired when the Modal is requested to be closed by a click on the overlay or when user press esc key.\n   */\n  onClose: () => void;\n  /**\n   * Callback fired when the escape key is pressed.\n   */\n  onEscKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?: (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => void;\n  /**\n   * Callback fired when the Modal has exited and the animation is finished.\n   */\n  onAnimationEnd?: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Modal = React.forwardRef(\n  (\n    {\n      open,\n      center,\n      blockScroll = true,\n      closeOnEsc = true,\n      closeOnOverlayClick = true,\n      container,\n      showCloseIcon = true,\n      closeIconId,\n      closeIcon,\n      focusTrapped = true,\n      initialFocusRef = undefined,\n      animationDuration = 300,\n      classNames,\n      styles,\n      role = 'dialog',\n      ariaDescribedby,\n      ariaLabelledby,\n      containerId,\n      modalId,\n      onClose,\n      onEscKeyDown,\n      onOverlayClick,\n      onAnimationEnd,\n      children,\n      reserveScrollBarGap,\n    }: ModalProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const refDialog = useForwardedRef(ref);\n    const refModal = useRef<HTMLDivElement>(null);\n    const refShouldClose = useRef<boolean | null>(null);\n    const refContainer = useRef<HTMLDivElement | null>(null);\n    // Lazily create the ref instance\n    // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n    if (refContainer.current === null && isBrowser) {\n      refContainer.current = document.createElement('div');\n    }\n\n    // The value should be false for srr, that way when the component is hydrated client side,\n    // it will match the server rendered content\n    const [showPortal, setShowPortal] = useState(false);\n\n    // Hook used to manage multiple modals opened at the same time\n    useModalManager(refModal, open);\n\n    // Hook used to manage the scroll\n    useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n    const handleOpen = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        !document.body.contains(refContainer.current)\n      ) {\n        document.body.appendChild(refContainer.current);\n      }\n\n      document.addEventListener('keydown', handleKeydown);\n    };\n\n    const handleClose = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        document.body.contains(refContainer.current)\n      ) {\n        document.body.removeChild(refContainer.current);\n      }\n      document.removeEventListener('keydown', handleKeydown);\n    };\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      // Only the last modal need to be escaped when pressing the esc key\n      if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n        return;\n      }\n\n      onEscKeyDown?.(event);\n\n      if (closeOnEsc) {\n        onClose();\n      }\n    };\n\n    useEffect(() => {\n      return () => {\n        if (showPortal) {\n          // When the modal is closed or removed directly, cleanup the listeners\n          handleClose();\n        }\n      };\n    }, [showPortal]);\n\n    useEffect(() => {\n      // If the open prop is changing, we need to open the modal\n      // This is also called on the first render if the open prop is true when the modal is created\n      if (open && !showPortal) {\n        setShowPortal(true);\n        handleOpen();\n      }\n    }, [open]);\n\n    const handleClickOverlay = (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      if (refShouldClose.current === null) {\n        refShouldClose.current = true;\n      }\n\n      if (!refShouldClose.current) {\n        refShouldClose.current = null;\n        return;\n      }\n\n      onOverlayClick?.(event);\n\n      if (closeOnOverlayClick) {\n        onClose();\n      }\n\n      refShouldClose.current = null;\n    };\n\n    const handleModalEvent = () => {\n      refShouldClose.current = false;\n    };\n\n    const handleAnimationEnd = () => {\n      if (!open) {\n        setShowPortal(false);\n      }\n\n      onAnimationEnd?.();\n    };\n\n    const containerModal = container || refContainer.current;\n\n    const overlayAnimation = open\n      ? classNames?.overlayAnimationIn ?? classes.overlayAnimationIn\n      : classNames?.overlayAnimationOut ?? classes.overlayAnimationOut;\n\n    const modalAnimation = open\n      ? classNames?.modalAnimationIn ?? classes.modalAnimationIn\n      : classNames?.modalAnimationOut ?? classes.modalAnimationOut;\n\n    return showPortal && containerModal\n      ? ReactDom.createPortal(\n          <div\n            className={cx(classes.root, classNames?.root)}\n            style={styles?.root}\n            data-testid=\"root\"\n          >\n            <div\n              className={cx(classes.overlay, classNames?.overlay)}\n              data-testid=\"overlay\"\n              aria-hidden={true}\n              style={{\n                animation: `${overlayAnimation} ${animationDuration}ms`,\n                ...styles?.overlay,\n              }}\n            />\n            <div\n              ref={refModal}\n              id={containerId}\n              className={cx(\n                classes.modalContainer,\n                center && classes.modalContainerCenter,\n                classNames?.modalContainer\n              )}\n              style={styles?.modalContainer}\n              data-testid=\"modal-container\"\n              onClick={handleClickOverlay}\n            >\n              <div\n                ref={refDialog}\n                className={cx(classes.modal, classNames?.modal)}\n                style={{\n                  animation: `${modalAnimation} ${animationDuration}ms`,\n                  ...styles?.modal,\n                }}\n                onMouseDown={handleModalEvent}\n                onMouseUp={handleModalEvent}\n                onClick={handleModalEvent}\n                onAnimationEnd={handleAnimationEnd}\n                id={modalId}\n                role={role}\n                aria-modal=\"true\"\n                aria-labelledby={ariaLabelledby}\n                aria-describedby={ariaDescribedby}\n                data-testid=\"modal\"\n                tabIndex={-1}\n              >\n                {focusTrapped && (\n                  <FocusTrap\n                    container={refDialog}\n                    initialFocusRef={initialFocusRef}\n                  />\n                )}\n                {children}\n                {showCloseIcon && (\n                  <CloseIcon\n                    classes={classes}\n                    classNames={classNames}\n                    styles={styles}\n                    closeIcon={closeIcon}\n                    onClick={onClose}\n                    id={closeIconId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>,\n          containerModal\n        )\n      : null;\n  }\n);\n\nexport default Modal;\n","import { useStatefulRef as r } from \"@bedrock-layout/use-stateful-ref\";\nimport s, { useRef as c } from \"react\";\nfunction o(t, u = { isStateful: !0 }) {\n  const n = r(null), f = c(null), e = u.isStateful ? n : f;\n  return s.useEffect(() => {\n    !t || (typeof t == \"function\" ? t(e.current) : t.current = e.current);\n  }), e;\n}\nexport {\n  o as default,\n  o as useForwardedRef\n};\n"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","hasPassiveEvents","window","passiveTestOptions","passive","addEventListener","removeEventListener","isIosDevice","navigator","platform","test","maxTouchPoints","locks","documentListenerAdded","initialClientY","previousBodyOverflowSetting","previousBodyPaddingRight","allowTouchMove","el","some","lock","options","preventDefault","rawEvent","e","event","target","touches","restoreOverflowSetting","undefined","document","body","style","paddingRight","overflow","disableBodyScroll","targetElement","concat","arr","arr2","from","_toConsumableArray","ontouchstart","targetTouches","clientY","ontouchmove","scrollTop","scrollHeight","clientHeight","isTargetElementTotallyScrolled","stopPropagation","handleScroll","_reserveScrollBarGap","reserveScrollBarGap","scrollBarGap","innerWidth","documentElement","clientWidth","setOverflowHidden","console","error","s","c","u","f","current","r","defineProperty","get","set","t","is","CloseIcon","styles","id","closeIcon","onClick","className","cx","closeButton","width","height","viewBox","d","isBrowser","candidateSelectors","isHidden","node","getComputedStyle","isNotRadioOrTabbableRadio","radioSet","radioScope","checked","nodes","getCheckedRadio","getAllTabbingElements","parentElem","currentActiveElement","tabbableNodes","onlyTabbable","getTabindex","tabindexAttr","parseInt","isNaN","isContentEditable","FocusTrap","container","initialFocusRef","refLastFocus","useRef","useEffect","handleKeyEvent","process","allTabbingElements","firstFocusableElement","lastFocusableElement","tabTrappingKey","savePreviousFocus","requestAnimationFrame","modals","modalManager","modal","useScrollLock","oldRef","open","refModal","enableBodyScroll","filter","showPortal","blockScroll","root","overlay","overlayAnimationIn","overlayAnimationOut","modalContainer","modalContainerCenter","modalAnimationIn","modalAnimationOut","Modal","center","closeOnEsc","closeOnOverlayClick","showCloseIcon","closeIconId","focusTrapped","animationDuration","role","ariaDescribedby","ariaLabelledby","containerId","modalId","onClose","onEscKeyDown","onOverlayClick","onAnimationEnd","children","refDialog","isStateful","n","useForwardedRef","refShouldClose","refContainer","useState","setShowPortal","ref","useModalManager","handleKeydown","handleModalEvent","containerModal","overlayAnimation","modalAnimation","animation","onMouseDown","onMouseUp","tabIndex"],"sourceRoot":""}